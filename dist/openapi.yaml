openapi: 3.0.3
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://127.0.0.1:3000
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /recipes/random:
    get:
      description: Returns 3 random recipes
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
      x-openapi-router-controller: recipes

  /recipes/family:
    get:
      description: Returns family recipes
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
      x-openapi-router-controller: recipes

  # /recipes/search:
  #   get:
  #     description: Returns a full details of a search query that filtered
  #     responses:
  #       '200':
  #         description: Successful response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Recipe'
  #     x-openapi-router-controller: recipes

  /recipes/info:
    get:
      description: Returns the full details of a recipe by its id
      parameters:
        - in: query
          name: recipeId
          description: ID of the recipe
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
      x-openapi-router-controller: recipes

  /recipes/family/info:
    get:
      description: Returns the full details of a family recipe by its id
      parameters:
        - in: query
          name: recipeId
          description: ID of the recipe
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
      x-openapi-router-controller: recipes

  /users/favorites:
    post:
      summary: Add a recipe to favorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
      responses:
        "200":
          description: Recipe successfully saved as favorite
        "401":
          description: Unauthorized
    get:
      summary: Get favorite recipes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "401":
          description: Unauthorized

  /users/history:
    post:
      summary: Add a recipe to history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
      responses:
        "200":
          description: Recipe added successfully to history
        "401":
          description: Unauthorized
    get:
      summary: Get recently viewed recipes from history
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "401":
          description: Unauthorized

  /users/inFavorites:
    get:
      summary: Check if a recipe is in favorites
      parameters:
        - in: query
          name: recipeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        "401":
          description: Unauthorized

  /users/inHistory:
    get:
      summary: Check if a recipe is in history
      parameters:
        - in: query
          name: recipeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        "401":
          description: Unauthorized

  /users/addRecipe:
    post:
      tags:
        - Recipe
        - User
      summary: A user Adds a new recipe to the server
      description: A JSON object contains all the details about the new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/recipePage"
        description: recipe to add
      responses:
        "201":
          description: A new recipe has been added
        "400":
          description: wrong input parameters

    get:
      tags:
        - Recipe
        - User
      summary: Get all recipes added by the user
      description: Retrieves all recipes added by the user
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
  /users/recipes/info:
    get:
      description: Get details of a user's added recipe by its id
      parameters:
        - name: recipeId
          in: query
          description: ID of the recipe
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
      x-openapi-router-controller: recipes

  /Register:
    post:
      tags:
        - Auth
      summary: A new user from client is added to the server
      description: A JSON object contains all the details about the new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: user to add
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters

  /Login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Logs in a user with the provided username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
              properties:
                Username:
                  type: string
                Password:
                  type: string
        description: User credentials for login
      responses:
        "200":
          description: User login successful
        "400":
          description: Invalid username or password

  /recipes/search:
    get:
      tags:
        - Recipe
      summary: searches recipes
      parameters:
        - in: query
          name: query
          required: true
          description: pass the title of the recipe for looking up
          schema:
            type: string
        - in: query
          name: limit
          description: number of records to return
          schema:
            type: integer
            format: int32
            enum: [5, 10, 15]
            minimum: 5
            maximum: 15
            default: 5
        - in: query
          name: filter
          description: filter results by specific options
          required: false
          schema:
            type: string
            enum: [cuisine, diet, intolerance]
        - in: query
          name: sortBy
          description: sort the results by specific options
          required: false
          schema:
            type: string
            enum: [time, popularity]
      responses:
        "200":
          description: search results found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/recipePage/properties"
        "400":
          description: bad input parameter

components:
  schemas:
    favPage:
      type: array
      items:
        type: object
        properties:
          InfoPreview:
            $ref: "#/components/schemas/InfoPreview"
      description: array of favorit recipes
    Recipe:
      type: object
      properties:
        recipeId:
          type: string
        title:
          type: string
        readyInMinutes:
          type: integer
        image:
          type: string
        popularity:
          type: number
        vegan:
          type: boolean
        vegetarian:
          type: boolean
        glutenFree:
          type: boolean
        extendedIngredients:
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"
        instruction:
          type: string
        servings:
          type: integer
    Ingredient:
      type: object
      properties:
        name:
          type: string
        amount:
          type: string
        unit:
          type: string
    myRecipes:
      type: array
      items:
        type: object
        properties:
          InfoPreview:
            $ref: "#/components/schemas/InfoPreview"
      description: array of user's recipes
    recipePage:
      type: object
      description: Model containig the full recipe page for each recipe
      required:
        - ingredients
        - instructions
        - dishesNum
      properties:
        InfoPreview:
          $ref: "#/components/schemas/InfoPreview"
        ingredients:
          type: array
          items:
            type: object
            properties:
              string:
                type: string
          description: ingredients and Quantities list
          example: [{ "eggs ": "5" }, { "flour": "3 cups" }]
        instructions:
          type: string
          description: instructions desctiption of each recipe
          example: In a small bowl, whisk together the salt, garlic, peppe, cumin...
        dishesNum:
          type: integer
          description: number of dishes this recipe is for
          example: 4
    InfoPreview:
      type: object
      description: Model containig information preview for each recipe
      required:
        - image
        - title
        - prepTime
        - likes
        - veganOrVegetarian
        - glutenFree
        - linkClicked
        - addToFav
      properties:
        image:
          type: object
          description: smaller image of the recipe
          example:
        title:
          type: string
          description: the name of the recipe
          example: banana bread
        prepTime:
          type: integer
          description: The preparation time in minutes
          example: 30
        likes:
          type: integer
          description: How popular is the recipe
          example: 15
        veganOrVegetarian:
          type: string
          description: Note if the recipe is vegetarian or vegan or not
          enum: [vegetarian, vegan, none]
          example: vegan
        glutenFree:
          type: boolean
          description: Note if the recipe is gluten free or not
          example: True
        linkClicked:
          type: boolean
          description: Note if the recipe viewed by a user
          example: True
        addToFav:
          type: boolean
          description: Note if the recipe added to users favorits
          example: false
    User:
      type: object
      description: Model containing user info
      required:
        - username
        - firstname
        - lastname
        - country
        - password
        - passwordConf
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          pattern: "[a-zA-Z]+"
          description: username contains between 3 to 8 letters only
          example: NADAVCH
        firstname:
          type: string
          description: user's first name
          example: Nadav
        lastname:
          type: string
          description: user's first name
          example: Cherry
        country:
          type: string
          description: user's country
          example: Israel
        password:
          type: string
          description: user's password contains between 5 to 10 chars, at least one of them is a number and a spacial char
          minLength: 5
          maxLength: 10
          format: password
          example: 4321R!
        passwordConf:
          type: string
          description: user's password contains between 5 to 10 chars, at least one of them is a number and a spacial char
          minLength: 5
          maxLength: 10
          format: password
          example: 4321R!
        email:
          type: string
          format: email
          description: user's email
          example: joMama@gmail.com
